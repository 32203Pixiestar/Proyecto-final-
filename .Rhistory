x = "Fecha", y = "",
subtitle = "Principales eventos en la historia de la construcción del muro fronterizo"
) +
# Estilo minimalista pero con detalles
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_blank(),  # Eliminar el eje Y
axis.ticks.y = element_blank(), # Eliminar las marcas del eje Y
axis.title.x = element_text(size = 14),  # Título del eje X
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotar las fechas para mayor legibilidad
plot.title = element_text(size = 18, face = "bold", color = "#333333"),
plot.subtitle = element_text(size = 14, color = "#666666"),
panel.grid.major = element_line(color = "#e6e6e6", size = 0.5),  # Cuadrícula sutil
plot.margin = margin(20, 40, 20, 20)  # Margen adicional para hacer el gráfico más espacioso
)
ggplot(eventos, aes(x = fecha, y = 1)) +
geom_point(aes(color = "Eventos"), size = 6, shape = 21, fill = "darkorange", stroke = 2, show.legend = FALSE) +
geom_segment(aes(x = fecha, xend = fecha, y = 0, yend = 1), color = "#0099cc", size = 1.5, linetype = "dashed") +
geom_text_repel(aes(label = evento), size = 4.5, fontface = "bold", color = "black",
box.padding = 0.5, point.padding = 0.5, segment.color = "grey", segment.size = 0.5) +
scale_x_date(labels = scales::date_format("%b %d, %Y"), breaks = "2 years") + # Intervalo de 2 años para mayor espacio
labs(
title = "Línea de Tiempo del Muro Fronterizo entre EE.UU. y México",
x = "Fecha", y = "",
subtitle = "Principales eventos en la historia de la construcción del muro fronterizo"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_blank(), # Eliminar eje Y
axis.ticks.y = element_blank(), # Eliminar las marcas del eje Y
axis.title.x = element_text(size = 14), # Título del eje X
axis.text.x = element_text(angle = 45, hjust = 1, size = 12), # Rotar las fechas
plot.title = element_text(size = 18, face = "bold", color = "#333333"),
plot.subtitle = element_text(size = 14, color = "#666666"),
panel.grid.major = element_line(color = "#e6e6e6", size = 0.5), # Cuadrícula sutil
plot.margin = margin(20, 40, 20, 20) # Márgenes
)
library(raster) #Maneja y analiza datos espaciales en formato de cuadrículas.
library(maps) #Dibuja mapas básicos
library(mapdata) #Proporciona mapas más detallados.
library(sp) #Trabaja con datos espaciales y vectoriales.
library(reshape2) #Reorganiza y transforma datos de formato ancho y largo.
library(mgcv) #Ajusta modelos generalizados para modelar datos complejos.
library(rgbif) #Proporciona acceso a la API del (GBIF), datos de biodiversidad
library(ggplot2) #Visualización de datos, permite generar gráficos
library(sf) #Para manejar y procesar datos geoespaciales y realizar análisis espaciales o crear mapas.
library(dplyr)# Para manipulación de datos tabulares.
library(tidyverse)#Manipulación, análisis y visualización de datos.
library(terra)#Leer, manipular y analizar grandes conjuntos de datos espaciales en formato ráster.
library(readr)#Importar datos en diferentes formatos de texto como CSV, TSV, y archivos delimitados.
library(readxl)#Paquete para leer archivos de Excel en R.
library(ggspatial)#Agregar elementos específicos de los mapas como escalas, flechas del norte, anotaciones espaciales.
library(rnaturalearth)#para cargar archivos shp de mexico
library(rnaturalearthdata)#escalas mayores
library(viridis) #para paletas de colores.
library(patchwork)#Combinar graficos en R
library(grid)# Para utilizar el objeto grob
library(gridExtra)# Paquete necesario para combinar gráficos
library(paletteer) #para paletas de colores.
library(devtools) #Simplifica y agiliza el desarrollo de paquetes R.
library(readr) #Poder leer datos rectangulares de archivos delimitados, como valores separados por comas (CSV)
library(elevatr) #Acceso a los datos de elevaciÃ³n desde las API web.
library(ggtext)#Permite texto con formato (markdowmn/HTML) en ggplot.
library(ggrepel)
library(lubridate)
library(ggalt)
#Datos de la linea de tiempo
eventos <- data.frame(
año = c(1994, 2006, 2010, 2020 ,2024),
evento = c("Comianza la construcción del muro por una estategia militar.",
"El congreso auntoriza la construccion masiva de 1125 km.",
"Se llega al objetivo de 1000km , aprox.",
"Refuerza la frontera con muros de acero",
"Se expande el muro a los 1,200 km , aprox.")
)
#Creacion de la linea del tiempo
ggplot(eventos, aes(x = año, y = 0, label = evento)) +
geom_hline(yintercept = 0, color = "gray40", linewidth = 1) +
geom_point(size = 3, color = "purple") +
geom_text_repel(aes(y = 20), size = 4, direction = "y" ,min.segment.length = 0,
box.padding = 1.5,        # Más espacio alrededor de cada etiqueta
point.padding = 0.5,
force = 2,                # Más fuerza de repulsión entre etiquetas
max.overlaps = Inf,
ylim = c(-50, 50)  ) +    # Amplía el rango vertical para distribuir mejor
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(x = "Año", title = "Algunos eventos de la historia de la frontera ")
especie <- "Ursus americanus" #Creamos un valor llamado especie, a partir de nuestra especie.
pais1 <- "MX" #Creamos un valor llamado pais1, a partir de México (se pone con su código ISO).
pais2 <- "US" #Creamos un valor llamado pais2, a partir de Estados Unidos (se pone con su código ISO)
year_range <- c(1970, 2024) #Creamos un vector, en donde solo nos muestre
taxon <- name_backbone(name = especie, rank = "species")
taxon_key <- taxon$usageKey
taxon <- name_backbone(name = especie, rank = "species")
taxon_key <- taxon$usageKey
res_mx <- occ_search(
taxonKey = taxon_key,
country = pais1,
hasCoordinate = TRUE,
basisOfRecord = "HUMAN_OBSERVATION",
year = paste0(year_range[1], ",", year_range[2]),
limit = 20000
)
res_us <- occ_search(
taxonKey = taxon_key,
country = pais2,
hasCoordinate = TRUE,
basisOfRecord = "HUMAN_OBSERVATION",
year = paste0(year_range[1], ",", year_range[2]),
limit = 20000
)
datos_ursus <- datos_ursus %>%
filter(!is.na(decimalLongitude),
!is.na(decimalLatitude),
!is.na(year)) %>%
distinct(key, .keep_all = TRUE) %>%
mutate(
year = as.integer(year),
countryCode = toupper(countryCode)
) %>%
filter(
year >= year_range[1],
year <= year_range[2],
countryCode %in% c("MX", "US")
)
datos_ursus <- datos_ursus %>% mutate(decada = paste0(floor(year / 10) * 10, "s"))
decadas_tabla <- datos_ursus %>% group_by(country = countryCode, decada) %>% summarise(abundancia = n(), .groups = "drop")
decadas_niveles <- c("1970s", "1980s", "1990s", "2000s", "2010s", "2020s") decadas_tabla <- decadas_tabla %>% complete(country = c("MX", "US"), decada = decadas_niveles, fill = list(abundancia = 0)) %>% mutate(decada = factor(decada, levels = decadas_niveles))
decadas_niveles <- c("1970s", "1980s", "1990s", "2000s", "2010s", "2020s") decadas_tabla <-  decadas_tabla %>% complete(country = c("MX", "US"), decada = decadas_niveles, fill = list(abundancia = 0)) %>% mutate(decada = factor(decada, levels = decadas_niveles))
# Definir las décadas
decadas_niveles <- c("1970s", "1980s", "1990s", "2000s", "2010s", "2020s")
# Aplicar la transformación a la tabla
decadas_tabla <- decadas_tabla %>%
complete(country = c("MX", "US"), decada = decadas_niveles, fill = list(abundancia = 0)) %>%
mutate(decada = factor(decada, levels = decadas_niveles))
print(decadas_tabla)
#Por falta de datos del 2010 para atrás en ambos países, el proyecto se redujo de intervalos de tiempo a las decádas de los 2010´s y 2020´s. datos_recientes <- datos_ursus %>% filter(decada %in% c("2010s", "2020s")) #le pedimos al paquete que solo nos de los datos de los 2010´s y los 2020´s.
abund_anual <- datos_recientes %>%
group_by(year, countryCode) %>%
summarise(abundancia = n(), .groups = "drop")
df_mx <- res_mx$data
df_us <- res_us$data
datos_ursus <- bind_rows(df_mx, df_us) %>%
select(key, species, genus, decimalLongitude, decimalLatitude,
year, stateProvince, country, countryCode)
abund_anual <- datos_recientes %>%
group_by(year, countryCode) %>%
summarise(abundancia = n(), .groups = "drop")
ls()
print(decadas_tabla)
atos_recientes <- datos_ursus %>%
filter(decada %in% c("2010s", "2020s"))
print(decadas_tabla)
datos_recientes <- datos_ursus %>%
filter(decada %in% c("2010s", "2020s"))
datos_ursus <- datos_ursus %>% mutate(decada = paste0(floor(year / 10) * 10, "s"))
decadas_tabla <- datos_ursus %>% group_by(country = countryCode, decada) %>% summarise(abundancia = n(), .groups = "drop")
# ---- 6. Completar décadas faltantes ----
decadas_niveles <- c("1970s", "1980s", "1990s", "2000s", "2010s", "2020s")
decadas_tabla <- decadas_tabla %>%
complete(country = c("MX", "US"),
decada = decadas_niveles,
fill = list(abundancia = 0)) %>%
mutate(decada = factor(decada, levels = decadas_niveles))
print(decadas_tabla)
datos_recientes <- datos_ursus %>%
filter(decada %in% c("2010s", "2020s"))
#Por falta de datos del 2010 para atrás en ambos países, el proyecto se redujo de intervalos de tiempo a las decádas de los 2010´s y 2020´s. datos_recientes <- datos_ursus %>% filter(decada %in% c("2010s", "2020s")) #le pedimos al paquete que solo nos de los datos de los 2010´s y los 2020´s.
ls()
abund_anual <- datos_recientes %>%
group_by(year, countryCode) %>%
summarise(abundancia = n(), .groups = "drop")
Grafico_Abundancia <- ggplot(abund_anual, aes(x = factor(year), y = abundancia, fill = countryCode)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "gray20") +
scale_fill_manual(values = c("MX" = "#D55E00", "US" = "#0072B2"),
labels = c("México", "Estados Unidos")) +
theme_minimal(base_size = 13) +
labs(
title = "Abundancia anual de *Ursus americanus* (2010–2024)",
subtitle = "Comparación entre México y Estados Unidos",
x = "Año",
y = "Número de observaciones (abundancia)",
fill = "País"
) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 0.9, hjust = 1),
legend.position = "top",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
Grafico_Abundancia
ggsave("Gráfico_Abundancia.png", path = "Proyecto Final",
Grafico_Abundancia, width = 8, height = 6, units = "in",
bg="white",
dpi = 300)
ls()
abund_anual <- datos_recientes %>%
group_by(year, countryCode) %>%
summarise(abundancia = n(), .groups = "drop")
Grafico_Abundancia <- ggplot(abund_anual, aes(x = factor(year), y = abundancia, fill = countryCode)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "gray20") +
scale_fill_manual(values = c("MX" = "#D55E00", "US" = "#0072B2"),
labels = c("México", "Estados Unidos")) +
theme_minimal(base_size = 13) +
labs(
title = "Abundancia anual de *Ursus americanus* (2010–2024)",
subtitle = "Comparación entre México y Estados Unidos",
x = "Año",
y = "Número de observaciones (abundancia)",
fill = "País"
) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 0.9, hjust = 1),
legend.position = "top",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
Grafico_Abundancia
# Diferencia en latitud respecto a la frontera
# Cada grado de latitud ≈ 111 km
datos_recientes <- datos_recientes %>%
mutate(
dist_muro_km = (decimalLatitude - 31) * 111,
# Norte (EE.UU.) será positivo, Sur (México) negativo
dist_muro_km = ifelse(countryCode == "MX", -abs(dist_muro_km), abs(dist_muro_km))
)
datos_dist <- datos_recientes %>%
mutate(dist_km_redondeada = round(dist_muro_km, -1)) %>%  # redondea cada 10 km
group_by(decada, countryCode, dist_km_redondeada) %>%
summarise(observaciones = n(), .groups = "drop")
Grafico_dispersion <- ggplot(datos_dist, aes(x = dist_km_redondeada, y = observaciones, color = countryCode)) +
geom_point(size = 3, alpha = 0.8) +
geom_vline(xintercept = 0, color = "black", linetype = "dashed") +
scale_color_manual(values = c("MX" = "#D55E00", "US" = "#0072B2")) +
facet_wrap(~decada, ncol = 1) +
theme_minimal(base_size = 13) +
labs(
title = "Distribución del *Ursus americanus* respecto al muro fronterizo",
subtitle = "Distancia aproximada (km) desde la frontera México–EE.UU.\nComparación entre décadas 2010s y 2020s",
x = "Distancia al muro (km; 0 = frontera)",
y = "Número de observaciones",
color = "País"
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.text = element_text(face = "bold", size = 12),
panel.grid = element_line(color = "gray85")
)
Grafico_dispersion <- ggplot(datos_dist, aes(x = dist_km_redondeada, y = observaciones, color = countryCode)) +
geom_point(size = 3, alpha = 0.8) +
geom_vline(xintercept = 0, color = "black", linetype = "dashed") +
scale_color_manual(values = c("MX" = "#D55E00", "US" = "#0072B2")) +
facet_wrap(~decada, ncol = 1) +
theme_minimal(base_size = 13) +
labs(
title = "Distribución del *Ursus americanus* respecto al muro fronterizo",
subtitle = "Distancia aproximada (km) desde la frontera México–EE.UU.\nComparación entre décadas 2010s y 2020s",
x = "Distancia al muro (km; 0 = frontera)",
y = "Número de observaciones",
color = "País"
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.text = element_text(face = "bold", size = 12),
panel.grid = element_line(color = "gray85")
)
Grafico_dispersion
mx <- ne_states(country = "Mexico", returnclass = "sf")
us <- ne_states(country = "United States of America", returnclass = "sf")
mapa_base <- rbind(mx, us) #Unimos ambos
Grafico_mapas <- ggplot() +
geom_sf(data = mapa_base, aes(fill = admin), color = "gray40", size = 0.3, show.legend = FALSE) +
geom_point(
data = datos_recientes,
aes(x = decimalLongitude, y = decimalLatitude, color = countryCode),
size = 1.6, alpha = 0.7
) +
scale_color_manual(values = c("MX" = "#E69F00", "US" = "#0072B2")) +
coord_sf(xlim = c(-125, -90), ylim = c(15, 55), expand = FALSE) +
facet_wrap(~decada, ncol = 2) +
theme_minimal(base_size = 12) +
labs(
title = "Distribución reciente del *Ursus americanus* (2010–2024)",
subtitle = "Comparación entre México y Estados Unidos por década",
color = "País",
x = "Longitud",
y = "Latitud"
) +
theme(
strip.text = element_text(face = "bold", size = 11),
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
panel.grid = element_line(color = "gray85", size = 0.2)
)
Grafico_mapas
Grafico_Boxplots <- ggplot(datos_recientes, aes(x = factor(year), y = decimalLatitude, fill = countryCode)) +
geom_boxplot(outlier.shape = 21, outlier.alpha = 0.6, outlier.size = 2, color = "gray30") +
scale_fill_manual(values = c("MX" = "#D55E00", "US" = "#0072B2"),
labels = c("México", "Estados Unidos")) +
theme_minimal(base_size = 13) +
labs(
title = "Distribución latitudinal de *Ursus americanus* por año",
subtitle = "Comparación entre México y Estados Unidos (2010–2024)",
x = "Año",
y = "Latitud (°N)",
fill = "País"
) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 0.9, hjust = 1),
legend.position = "top",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
Grafico_Boxplots
ggsave("Gráfico_Boxplot.png", path = "Proyecto Final",
Grafico_Boxplots, width = 8, height = 6, units = "in",
bg="white",
dpi = 300)
Grafico_Boxplots <- ggplot(datos_recientes, aes(x = factor(year), y = decimalLatitude, fill = countryCode)) +
geom_boxplot(outlier.shape = 21, outlier.alpha = 0.6, outlier.size = 2, color = "gray30") +
scale_fill_manual(values = c("MX" = "#D55E00", "US" = "#0072B2"),
labels = c("México", "Estados Unidos")) +
theme_minimal(base_size = 13) +
labs(
title = "Distribución latitudinal de *Ursus americanus* por año",
subtitle = "Comparación entre México y Estados Unidos (2010–2024)",
x = "Año",
y = "Latitud (°N)",
fill = "País"
) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 0.9, hjust = 1),
legend.position = "top",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
Grafico_Boxplots
raster_relieve <- terra::rast("SR_50M.tif")
print(terra::crs(raster_relieve)) ## Verifica que tenga sistema de coordenadas
if (terra::crs(raster_relieve) != "EPSG:4326") { raster_relieve <- terra::project(raster_relieve, "EPSG:4326") }
mx <- rnaturalearth::ne_states(country = "Mexico", returnclass = "sf")
us <-rnaturalearth::ne_states(country = "United States of America", returnclass = "sf")
mapa_base <- rbind(mx, us)
zona_estudio <- st_bbox(c(xmin = -120, xmax = -95, ymin = 20, ymax = 40), crs = st_crs(4326)) %>%
st_as_sfc()
raster_relieve_crop <- crop(raster_relieve, vect(zona_estudio))
datos_recientes <- datos_ursus %>%
filter(decada %in% c("2010s", "2020s")) %>%
filter(!is.na(decimalLongitude), !is.na(decimalLatitude))
puntos_ursus <- st_as_sf(datos_recientes,
coords = c("decimalLongitude", "decimalLatitude"),
crs = 4326)
raster_df <- as.data.frame(raster_relieve_crop, xy = TRUE)
names(raster_df)[3] <- "altitud"
MAPA_FINAL <- ggplot() +
# Capa raster
geom_raster(data = raster_df, aes(x = x, y = y, fill = altitud)) +
scale_fill_gradientn(colours = terrain.colors(10), name = "Altitud (m)") +
# Fronteras y divisiones políticas
geom_sf(data = mapa_base, fill = NA, color = "gray40", size = 0.4) +
# Puntos de Ursus
geom_sf(data = puntos_ursus, aes(color = countryCode),
size = 2, alpha = 0.8) +
scale_color_manual(
values = c("MX" = "#D55E00", "US" = "#0072B2"),
labels = c("México", "Estados Unidos"),
name = "País"
) +
coord_sf(xlim = c(-120, -95), ylim = c(20, 40), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.35, text_cex = 0.8) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.6, "cm"), pad_y = unit(0.6, "cm"),
style = north_arrow_fancy_orienteering) +
labs(
title = "Mapa del sitio de estudio del *Ursus americanus*",
subtitle = "Zona fronteriza México–Estados Unidos (2010–2024)",
x = "Longitud",
y = "Latitud"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "right",
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
panel.grid = element_line(color = "gray85", size = 0.2)
)
MAPA_FINAL
library(raster) #Maneja y analiza datos espaciales en formato de cuadrículas.
library(maps) #Dibuja mapas básicos
library(mapdata) #Proporciona mapas más detallados.
library(sp) #Trabaja con datos espaciales y vectoriales.
library(reshape2) #Reorganiza y transforma datos de formato ancho y largo.
library(mgcv) #Ajusta modelos generalizados para modelar datos complejos.
library(rgbif) #Proporciona acceso a la API del (GBIF), datos de biodiversidad
library(ggplot2) #Visualización de datos, permite generar gráficos
library(sf) #Para manejar y procesar datos geoespaciales y realizar análisis espaciales o crear mapas.
library(dplyr)# Para manipulación de datos tabulares.
library(tidyverse)#Manipulación, análisis y visualización de datos.
library(terra)#Leer, manipular y analizar grandes conjuntos de datos espaciales en formato ráster.
library(readr)#Importar datos en diferentes formatos de texto como CSV, TSV, y archivos delimitados.
library(readxl)#Paquete para leer archivos de Excel en R.
library(ggspatial)#Agregar elementos específicos de los mapas como escalas, flechas del norte, anotaciones espaciales.
library(rnaturalearth)#para cargar archivos shp de mexico
library(rnaturalearthdata)#escalas mayores
library(viridis) #para paletas de colores.
library(patchwork)#Combinar graficos en R
library(grid)# Para utilizar el objeto grob
library(gridExtra)# Paquete necesario para combinar gráficos
library(paletteer) #para paletas de colores.
library(devtools) #Simplifica y agiliza el desarrollo de paquetes R.
library(readr) #Poder leer datos rectangulares de archivos delimitados, como valores separados por comas (CSV)
library(elevatr) #Acceso a los datos de elevaciÃ³n desde las API web.
library(ggtext)#Permite texto con formato (markdowmn/HTML) en ggplot.
library(ggrepel)
library(raster) #Maneja y analiza datos espaciales en formato de cuadrículas.
library(maps) #Dibuja mapas básicos
library(mapdata) #Proporciona mapas más detallados.
library(sp) #Trabaja con datos espaciales y vectoriales.
library(reshape2) #Reorganiza y transforma datos de formato ancho y largo.
library(mgcv) #Ajusta modelos generalizados para modelar datos complejos.
library(rgbif) #Proporciona acceso a la API del (GBIF), datos de biodiversidad
library(ggplot2) #Visualización de datos, permite generar gráficos
library(sf) #Para manejar y procesar datos geoespaciales y realizar análisis espaciales o crear mapas.
library(dplyr)# Para manipulación de datos tabulares.
library(tidyverse)#Manipulación, análisis y visualización de datos.
library(terra)#Leer, manipular y analizar grandes conjuntos de datos espaciales en formato ráster.
library(readr)#Importar datos en diferentes formatos de texto como CSV, TSV, y archivos delimitados.
library(readxl)#Paquete para leer archivos de Excel en R.
library(ggspatial)#Agregar elementos específicos de los mapas como escalas, flechas del norte, anotaciones espaciales.
library(rnaturalearth)#para cargar archivos shp de mexico
library(rnaturalearthdata)#escalas mayores
library(viridis) #para paletas de colores.
library(patchwork)#Combinar graficos en R
library(grid)# Para utilizar el objeto grob
library(gridExtra)# Paquete necesario para combinar gráficos
library(paletteer) #para paletas de colores.
library(devtools) #Simplifica y agiliza el desarrollo de paquetes R.
library(readr) #Poder leer datos rectangulares de archivos delimitados, como valores separados por comas (CSV)
library(elevatr) #Acceso a los datos de elevaciÃ³n desde las API web.
library(rnaturalearthhires)#para hacer mapas de alta resolución (escala 10)
library(ggtext)
#Datos de la linea de tiempo
eventos <- data.frame(
año = c(1994, 2006, 2010, 2020 ,2024),
evento = c("Comianza la construcción del muro por una estategia militar.",
"El congreso auntoriza la construccion masiva de 1125 km.",
"Se llega al objetivo de 1000km , aprox.",
"Refuerza la frontera con muros de acero",
"Se expande el muro a los 1,200 km , aprox.")
)
#Creacion de la linea del tiempo
ggplot(eventos, aes(x = año, y = 0, label = evento)) +
geom_hline(yintercept = 0, color = "gray40", linewidth = 1) +
geom_point(size = 3, color = "purple") +
geom_text_repel(aes(y = 20), size = 4, direction = "y" ,min.segment.length = 0,
box.padding = 1.5,        # Más espacio alrededor de cada etiqueta
point.padding = 0.5,
force = 2,                # Más fuerza de repulsión entre etiquetas
max.overlaps = Inf,
ylim = c(-50, 50)  ) +    # Amplía el rango vertical para distribuir mejor
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(x = "Año", title = "Algunos eventos de la historia de la frontera ")
especie <- "Ursus americanus" #Creamos un valor llamado especie, a partir de nuestra especie.
pais1 <- "MX" #Creamos un valor llamado pais1, a partir de México (se pone con su código ISO).
pais2 <- "US" #Creamos un valor llamado pais2, a partir de Estados Unidos (se pone con su código ISO)
year_range <- c(1970, 2024) #Creamos un vector, en donde solo nos muestre
especie <- "Ursus americanus" #Creamos un valor llamado especie, a partir de nuestra especie.
pais1 <- "MX" #Creamos un valor llamado pais1, a partir de México (se pone con su código ISO).
pais2 <- "US" #Creamos un valor llamado pais2, a partir de Estados Unidos (se pone con su código ISO)
year_range <- c(1970, 2024) #Creamos un vector, en donde solo nos muestre
taxon <- name_backbone(name = especie, rank = "species")
taxon_key <- taxon$usageKey
res_mx <- occ_search(
taxonKey = taxon_key,
country = pais1,
hasCoordinate = TRUE,
basisOfRecord = "HUMAN_OBSERVATION",
year = paste0(year_range[1], ",", year_range[2]),
limit = 20000
)
res_us <- occ_search(
taxonKey = taxon_key,
country = pais2,
hasCoordinate = TRUE,
basisOfRecord = "HUMAN_OBSERVATION",
year = paste0(year_range[1], ",", year_range[2]),
limit = 20000
)
res_us <- occ_search(
taxonKey = taxon_key,
country = pais2,
hasCoordinate = TRUE,
basisOfRecord = "HUMAN_OBSERVATION",
year = paste0(year_range[1], ",", year_range[2]),
limit = 20000
)
